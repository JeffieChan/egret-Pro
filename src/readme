utils 是工具类函数 全局的

## 用户头像 用户信息
自身属性  名字 金币 头像 等级边框 个人发出的消息 、飞出的金币（可类可不类）
供调用的方法  修改自身金币信息、 发消息 、 飞金币、（ 进场出场？应该算舞台的 （动画应该在个人方法上） ）
事件 ：点击查看个人信息（ 弹窗 感觉直接用定位 更加容易一些）

##  比赛场地
比赛进度条 、 是否加时 、 是否点球
含对阵信息、对阵赔率 、 已投金额
比分实时显示
开奖结果  金币收起  金币派发
换场 ！
4队的情况 （位置不一样）
2队的情况 （位置不一样）
1队的情况 （位置不一样）

## 头部
返回  比赛的信息，期号

## 底部
投注象 发消息 、帮助 奖池

比赛时间的倒计时（请下注、 封场（竞猜完毕） 、正在开奖 、 派奖）

# 声音
 金币投注的声音  （倒计时） （派发）

## loading 进场
## 转场（ 带上期号和 ） 4,2,1


#
 Header 头部 返回区域，隐藏不需要
 Top   顶部文字区域
 Foot  底部区域
 		FootBtn 底部按钮
 Cnt   内容区 
	 Timer 倒计时区域
	 TextTips 文字提示
	 FootballField  足球场
	 UserImage 用户头像
	 Pop 竞猜开始结束弹窗
	 Pop02 信息类弹窗
	 ChampionC 冠军记录弹窗的内容
	 Penalty  进球过程


###### tips 固定的东西，优先new 让其处于内存中

https://ashan.org/archives/522
https://ashan.org/category/egret
不要向stage中放置太多的DisplayObject 就如同天朝的人口数量一样，
什么东西多了都是噩梦。太多的显示对象不仅仅在第三步会消耗性能，
更重要的是，在第四步的时候，会严重影响性能。让帧频下降。 
如果作为程序员你的抱怨设计师或者策划师在游戏中添加了太多内容的话。那么我可以给你一个不错的建议。 
你可以想办法将画面中的元素进行合并。合并不是将两个Bitmap塞到一个Sprite中。这样并不能起作用。无论是嵌套还是并列，都会消耗大量性能。
如果可以，你最好调整游戏元素图片的拆分方式，尽量减少DisplayObject的数量。 
另外一种方法是使用cacheAsBitmap，让你的矢量图在运行时以位图形式进行计算。
这会大大减少你的矢量图运算

白鹭引擎官方提供了 MovieClip API 来进行帧动画创作

         *  egret.Tween.get(display).call(function (a:number, b:string) {
         *      console.log("a: " + a); //对应传入的第一个参数 233
         *      console.log("b: " + b); //对应传入的第二个参数 “hello”
         *  }, this, [233, "hello"]);

